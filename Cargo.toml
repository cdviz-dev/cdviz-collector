[package]
name = "cdviz-collector"
description = "A service & cli to collect SDLC/CI/CD events and to dispatch as cdevents."
keywords = ["cd", "cdevents", "sdlc"]
categories = []
edition = "2024"
version = "0.11.1"
authors = ["David Bernard"]
license = "AGPL-3.0-only"
homepage = "https://cdviz.dev"
repository = "https://github.com/cdviz-dev/cdviz-collector"
publish = true

[package.metadata.cargo-machete]
ignored = ["humantime-serde"] # auto-registered and used at runtime

[[bin]]
name = "cdviz-collector"
path = "src/main.rs"
doc = false

[features]
## default is "full" feature set
default = [
    "config_remote",
    "sink_db",
    "sink_folder",
    "sink_http",
    "sink_sse",
    "source_opendal",
    "source_sse",
    "tool_transform",
    "transformer_vrl",
]
#! ### Sinks
sink_db = ["dep:sqlx"]
sink_folder = ["dep:opendal"]
sink_http = [
    "dep:reqwest",
    "dep:reqwest-middleware",
    "dep:reqwest-tracing",
    # reqwest is also used as transitive dependencies
    "reqwest/charset",
    "reqwest/http2",
    "reqwest/json",
    "reqwest/rustls-tls",
]
sink_sse = ["dep:tokio-stream"]
#! ### Sources
source_opendal = ["dep:bytes", "dep:csv", "dep:globset", "dep:opendal"]
source_sse = ["dep:reqwest-eventsource", "dep:uuid"]

#! ### Configuration
config_remote = ["dep:opendal"]

#! ### Transformers
transformer_vrl = ["dep:vrl"]

#! ### Tools
tool_ui = ["dep:cliclack", "dep:console", "dep:similar"]
tool_transform = ["source_opendal", "tool_ui", "transformer_vrl"]

[dependencies]
axum = "0.8"
axum-tracing-opentelemetry = "0.29"
base64 = "0.22"
bytes = { version = "1", optional = true }
cdevents-sdk = { version = "0.2", features = ["cloudevents"] }
chrono = { version = "0.4", features = ["serde"] }
cid = "0.11"
clap = { version = "4", features = ["derive", "env"] }
clap-verbosity-flag = "3"
cliclack = { version = "0.3", optional = true }
cloudevents-sdk = { version = "0.8", features = ["http-binding"] }
console = { version = "0.15", optional = true } # same version as cliclack
csv = { version = "1", optional = true }
derive_more = { version = "2", features = ["display", "from", "error"] }
enum_dispatch = "0.3"
faster-hex = "0.10"
figment = { version = "0.10", features = ["toml", "env"] }
figment_file_provider_adapter = "0.1"
futures = "0.3"
globset = { version = "0.4", optional = true }
hmac = "0.12"
humantime-serde = "1"
init-tracing-opentelemetry = { version = "0.30", features = [
  "otlp",
  "tracing_subscriber_ext",
  "logfmt",
] }
miette = { version = "7", features = ["fancy"] }
multihash = "0.19"
opendal = { version = "0.54", default-features = false, features = [
  "services-fs",
  # "services-ftp",
  "services-gcs",
  "services-github",
  "services-http",
  "services-s3",
  "services-sftp",
], optional = true }
opentelemetry = "0.30"
regex = "1"
reqwest = { version = "0.12", default-features = false, optional = true }
reqwest-eventsource = { version = "0.6", optional = true }
reqwest-middleware = { version = "0.4", features = ["json"], optional = true }
reqwest-tracing = { version = "0.5", optional = true }
secrecy = { version = "0.10", features = ["serde"] }
serde = { version = "1", features = ["derive"] }
serde_json = "1"
serde_with = "3"
sha2 = "0.10"
similar = { version = "2", optional = true, features = ["unicode", "inline"] }
sqlx = { version = "0.8", features = [
  "postgres",
  "runtime-tokio",
  "tls-rustls",
  "macros",
  "time",
  "json",
], default-features = false, optional = true }
tokio = { version = "1", features = ["full"] }
tokio-stream = { version = "0.1", features = ["sync"], optional = true }
tokio-util = "0.7"
tower = { version = "0.5", features = ["util"] }
tower-http = { version = "0.6", features = [
  "compression-full",
  "cors",
  "decompression-full",
  "timeout",
  "sensitive-headers",
  "validate-request",
] }
tracing = "0.1"
tracing-opentelemetry = "0.31"
tracing-opentelemetry-instrumentation-sdk = { version = "0.29" }
uuid = { version = "1", optional = true }
vrl = { version = "0.26", optional = true, default-features = false, features = [
  "compiler",
  "core",
  "diagnostic",
  "path",
  "parser",
  "stdlib",
  "value",
] }

[target.'cfg(all(target_env = "musl", target_pointer_width = "64"))'.dependencies.jemallocator]
version = "0.5"

[dev-dependencies]
assert2 = "0.3"
cdevents-sdk = { version = "0.2", features = ["testkit"] }
figment = { version = "0.10", features = ["toml", "env", "test"] }
indoc = "2"
pretty_assertions = "1"
proptest = "1"
reqwest-eventsource = "0.6"
rstest = "0.26"
rustainers = "0.15"
tempfile = "3"
test-strategy = "0.4"
test-trace = "0.3"
time = "=0.3.39"                                                   # HACK explicit fix version (not used) to avoid compilation errors on domain #see https://github.com/NLnetLabs/domain/issues/502
toml = "0.8"                                                       # same version as figment
tower = { version = "0.5", features = ["util"] }
tracing-subscriber = "0.3"
uuid = "1"
wiremock = "0.6"

[lints.rust]
unsafe_code = "forbid"
missing_docs = "allow" # not published as crate
deprecated = "warn"
warnings = "deny"

[lints.clippy]
perf = { level = "warn", priority = -1 }
pedantic = { level = "warn", priority = -1 }
cargo = { level = "allow", priority = -1 }   # not published as crate
undocumented_unsafe_blocks = "deny"
dbg_macro = "warn"
decimal_literal_representation = "warn"
expect_used = "warn"
if_then_some_else_none = "warn"
indexing_slicing = "allow"
large_include_file = "warn"
# min_ident_chars = "warn"
print_stderr = "warn"
print_stdout = "warn"
rc_buffer = "warn"
rc_mutex = "warn"
unnecessary_safety_doc = "warn"
unwrap_used = "warn"
module_name_repetitions = "allow"

[profile.release]
lto = "thin"      # see https://doc.rust-lang.org/cargo/reference/profiles.html#lto
codegen-units = 1
strip = "symbols" # "none", "debuginfo", "symbols"

# The profile that 'dist' will build with
[profile.dist]
inherits = "release"

# Convert [github events](https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads)
# to [cdevents](https://cdevents.dev)
#
# | done | Kubewatch CloudEvent | cdevent |
# | --- | --- | --- |
# | [x] | {deployment, statefulset, daemonset}:create | service:{deployed} |
# | [x] | {deployment, statefulset, daemonset}:delete | service:{removed} |
# | [x] | {deployment, statefulset, daemonset}:update | service:{deployed, upgraded, removed} |
#
# TODO compare .body.data.obj.spec.template.spec.containers to .body.data.oldObj.spec.template.spec.containers to determine which container is created, updated, removed
# TODO detect "rolledback" (upgraded to a lower version => how to compare versions (digests, tags)?)

id = "0" # "0" to let collector generate an id
output =[]
# log(.body.data.kind)
# log(.body.data.operation)
# test existance of a field to determine the event type (alternative: .headers["X-GitHub-Event"])
if includes(["Deployment", "StatefulSet", "DaemonSet"], .body.data.kind) && (.body.data.apiVersion == "apps/v1") {
  ts = parse_timestamp(.body.time, "%+") ?? now()
  ts = format_timestamp!(ts, format: "%+")
  if includes(["create", "update", "delete"], .body.data.operation) {
    # use the same logic for create, update, delete
    # expecting that oldObj is empty for `create` and obj is empty for `delete`

    namespace = .body.data.obj.metadata.namespace || .body.data.oldObj.metadata.namespace
    resource_name = .body.data.obj.metadata.name || .body.data.oldObj.metadata.name
    # TODO? use labels: "app.kubernetes.io/name",... (in this case how to link to artifacts & packages)

    old_containers = map_values(array!(.body.data.oldObj.spec.template.spec.containers || [])) -> |container| {
      # TODO use https://vector.dev/docs/reference/vrl/functions/#parse_grok and support multiple cases
      parts = split(container.image, ":", limit: 2) ?? [container.image, "latest"]
      tag = parts[1]
      parts = split(parts[0], "@", limit: 2) ?? [parts[0], ""]
      digest = parts[1]
      version = ""
      if !is_nullish(digest) {
        version = ("@" + encode_percent(digest)) ?? ""
      }
      raw_repository_url = parts[0]
      repository_url = raw_repository_url
      pathfragments = split(repository_url, "/") ?? [parts[0]]
      if !contains(string!(pathfragments[0]), ".") {
        repository_url = "docker.io/" + repository_url ?? repository_url
      }
      name = pathfragments[-1]
      container_name = container.name || name || "noname"
      {
        "container_name": container_name,
        "name": name,
        "version": version,
        "repository_url": repository_url,
        "tag": tag,
      }
    }

    new_containers = map_values(array!(.body.data.obj.spec.template.spec.containers || [])) -> |container| {
      # TODO use https://vector.dev/docs/reference/vrl/functions/#parse_grok and support multiple cases
      parts = split(container.image, ":", limit: 2) ?? [container.image, "latest"]
      tag = parts[1]
      parts = split(parts[0], "@", limit: 2) ?? [parts[0], ""]
      digest = parts[1]
      version = ""
      if !is_nullish(digest) {
        version = ("@" + encode_percent(digest)) ?? ""
      }
      raw_repository_url = parts[0]
      repository_url = raw_repository_url
      pathfragments = split(repository_url, "/") ?? [parts[0]]
      if !contains(string!(pathfragments[0]), ".") {
        repository_url = "docker.io/" + repository_url ?? repository_url
      }
      name = pathfragments[-1]
      container_name = container.name || name || "noname"
      {
        "container_name": container_name,
        "name": name,
        "version": version,
        "repository_url": repository_url,
        "tag": tag,
      }
    }

    # removed = container_name no longer used (ignore the image)
    # upgraded = container_name exist in both old and new, but image is different
    # created = container_name is new but not in old
    # same => no event/output

    for_each(new_containers) -> |_index, container| {
      previous = filter(old_containers) -> |_index, old_container| {
        old_container.container_name == container.container_name
      }
      type = if is_empty(previous) {
        type = "dev.cdevents.service.deployed.0.2.0"
      } else if (previous[0].repository_url != container.repository_url) || (previous[0].tag != container.tag) || (previous[0].version != container.version) {
        type = "dev.cdevents.service.updated.0.2.0"
      } else {
        null
      }

      if !is_null(type) {
        container_name = container.container_name
        name = container.name
        version = container.version
        repository_url = container.repository_url
        tag = container.tag
        output = push(output, {
          "metadata": .metadata,
          "header": .header,
          "body": {
            "context": {
              "version": "0.4.1",
              "id": id,
              "source": "/kubewatch",
              "type": type,
              "timestamp": ts,
            },
            "subject": {
              "id": "{{ namespace }}/{{ resource_name }}/{{ container_name }}" ?? container_name,
              # "source": .metadata.k8s_source, # k8s cluster's url ?
              "type": "service",
              "content": {
                "environment": {
                  "id": .metadata.environment_id,
                },
                "artifactId": "pkg:oci/{{ name }}{{ version }}?repository_url={{ repository_url }}&tag={{ tag }}" ?? "",
              }
            }
          }
        })
      }
    }

    for_each(old_containers) -> |_index, container| {
      present = filter(new_containers) -> |_index, old_container| {
        old_container.container_name == container.container_name
      }
      if is_empty(present) {
        container_name = container.container_name
        output = push(output, {
          "metadata": .metadata,
          "header": .header,
          "body": {
            "context": {
              "version": "0.4.1",
              "id": id,
              "source": "/kubewatch",
              "type": "dev.cdevents.service.removed.0.2.0",
              "timestamp": ts,
            },
            "subject": {
              "id": "{{ namespace }}/{{ resource_name }}/{{ container_name }}" ?? container_name,
              # "source": .metadata.k8s_source, # k8s cluster's url ?
              "type": "service",
              "content": {
                "environment": {
                  "id": .metadata.environment_id,
                },
              }
            }
          }
        })
      }
    }
  }
}
# log(output)
output
